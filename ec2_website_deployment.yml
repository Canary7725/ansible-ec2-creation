---
- hosts: localhost
  connection: local
  gather_facts: False
  tags: provisioning
  vars:
    keypair: nepscape_key
    instance_type: t2.micro
    image: ami-084568db4383264d4
    wait: yes
    group: webserver
    count: 1
    region: us-east-1
    security_group: Ansible-sg
    vpc_id: "{{ lookup('env', 'VPC_ID') }}"
  tasks:
    - name: Task # 1 - Create my security group
      amazon.aws.ec2_group:
        name: "{{security_group}}"
        description: Security Group for webserver Servers
        vpc_id: "{{vpc_id}}"
        region: "{{ region }}"
        rules:
          - proto: tcp
            from_port: 22
            to_port: 22
            cidr_ip: 0.0.0.0/0
          - proto: tcp
            from_port: 443
            to_port: 443
            cidr_ip: 0.0.0.0/0
          - proto: tcp
            from_port: 8080
            to_port: 8080
            cidr_ip: 0.0.0.0/0
          - proto: tcp
            from_port: 80
            to_port: 80
            cidr_ip: 0.0.0.0/0
        rules_egress:
          - proto: all
            cidr_ip: 0.0.0.0/0
      register: basic_firewall

    - name: Debug security group output
      debug:
        var: basic_firewall

    - name: Task # 2 Launch the new EC2 Instance
      amazon.aws.ec2_instance:
        name: AnsibleCreateEC2Instance
        key_name: "{{ keypair }}"
        instance_type: "{{ instance_type }}"
        image_id: "{{ image }}"
        region: "{{ region }}"
        security_groups: ["{{ security_group }}"]
        network:
          assign_public_ip: true
        state: running
        wait: true
        count: "{{ count }}"
      register: ec2
    - name: Wait for SSH to be available
      ansible.builtin.wait_for:
        host: "{{ ec2.instances[0].public_ip_address | default('') }}"
        port: 22
        delay: 10
        timeout: 300

    - name: Add Host to Inventory
      ansible.builtin.add_host:
        name: "{{ ec2.instances[0].public_ip_address | default('') }}"
        groups: launched_instances
        ansible_user: ubuntu
        ansible_ssh_private_key_file: "~/.ssh/{{ keypair }}.pem"
        ansible_ssh_common_args: '-o StrictHostKeyChecking=no'

- hosts: launched_instances
  become: yes
  vars:
    key_pair: nepscape_key
  tasks:
    - name: Update System Packages
      ansible.builtin.apt:
        update_cache: yes
        upgrade: dist
        autoremove: yes
        autoclean: yes

    - name: Install Required Packages
      ansible.builtin.apt:
        name:
          - nginx
          - openssl
          - python3
        state: present

    - name: Create Website Directories
      ansible.builtin.file:
        path: "{{ item }}"
        state: directory
        mode: '0755'
      loop:
        - /var/www/task1
        - /var/www/task2
        - /etc/ssl/private
        - /etc/ssl/certs

    - name: Create Website Pages
      ansible.builtin.copy:
        content: |
          <!DOCTYPE html>
          <html>
          <head><title>{{ item.title }}</title></head>
          <body><h1>{{ item.content }}</h1></body>
          </html>
        dest: "{{ item.path }}"
        mode: '0644'
      loop:
        - { path: '/var/www/task1/index.html', title: 'Page 1', content: 'Welcome to Page 1' }
        - { path: '/var/www/task2/index.html', title: 'Page 2', content: 'Welcome to Page 2' }

    - name: Retrieve Public IP
      ansible.builtin.uri:
        url: https://api.ipify.org
        return_content: yes
      register: public_ip

    - name: Generate Self-Signed SSL Certificate
      ansible.builtin.shell: |
        openssl req -x509 -nodes -days 365 -newkey rsa:2048 \
        -keyout /etc/ssl/private/nginx-selfsigned.key \
        -out /etc/ssl/certs/nginx-selfsigned.crt \
        -subj "/CN={{ inventory_hostname }}"
      args:
        creates: /etc/ssl/certs/nginx-selfsigned.crt

    - name: Configure Nginx for SSL and Website Hosting
      ansible.builtin.template:
        src: nginx_ssl_config.j2
        dest: /etc/nginx/sites-available/default
      notify:
        - Restart Nginx

    - name: Generate SSH Key Pair
      ansible.builtin.openssh_keypair:
        path: "~/.ssh/{{ key_pair }}"
        type: rsa
        size: 4096
        state: present
        comment: "Generated by Ansible for {{ ansible_hostname }}"

    - name: Add SSH Public Key
      ansible.posix.authorized_key:
        user: ubuntu
        state: present
        key: "{{ lookup('file', '~/.ssh/{{ key_pair }}.pub') }}"

  handlers:
    - name: Restart Nginx
      ansible.builtin.systemd:
        name: nginx
        state: restarted

